import { Injectable, NgModule, defineInjectable } from '@angular/core';
import { fromEvent, merge, Subject, timer } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BnNgIdleService = /** @class */ (function () {
    function BnNgIdleService() {
        this.expired$ = new Subject();
    }
    /**
     * @param {?} timeOutSeconds
     * @return {?}
     */
    BnNgIdleService.prototype.startWatching = /**
     * @param {?} timeOutSeconds
     * @return {?}
     */
    function (timeOutSeconds) {
        var _this = this;
        this.idle$ = merge(fromEvent(document, 'mosuemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));
        this.timeOutMilliSeconds = timeOutSeconds * 1000;
        this.idleSubscription = this.idle$.subscribe(function (res) {
            _this.resetTimer();
        });
        this.startTimer();
        return this.expired$;
    };
    /**
     * @return {?}
     */
    BnNgIdleService.prototype.startTimer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe(function (res) {
            _this.expired$.next(true);
        });
    };
    /**
     * @return {?}
     */
    BnNgIdleService.prototype.resetTimer = /**
     * @return {?}
     */
    function () {
        this.timer$.unsubscribe();
        this.startTimer();
    };
    /**
     * @return {?}
     */
    BnNgIdleService.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        this.timer$.unsubscribe();
        this.idleSubscription.unsubscribe();
    };
    BnNgIdleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    BnNgIdleService.ctorParameters = function () { return []; };
    /** @nocollapse */ BnNgIdleService.ngInjectableDef = defineInjectable({ factory: function BnNgIdleService_Factory() { return new BnNgIdleService(); }, token: BnNgIdleService, providedIn: "root" });
    return BnNgIdleService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BnNgIdleModule = /** @class */ (function () {
    function BnNgIdleModule() {
    }
    BnNgIdleModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    providers: [BnNgIdleService],
                    exports: []
                },] },
    ];
    return BnNgIdleModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { BnNgIdleService, BnNgIdleModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm4tbmctaWRsZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vYm4tbmctaWRsZS9saWIvYm4tbmctaWRsZS5zZXJ2aWNlLnRzIiwibmc6Ly9ibi1uZy1pZGxlL2xpYi9ibi1uZy1pZGxlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tRXZlbnQsIG1lcmdlLCBTdWJqZWN0LCB0aW1lciB9IGZyb20gJ3J4anMnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJuTmdJZGxlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBpZGxlJDogT2JzZXJ2YWJsZTxhbnk+O1xuICBwcml2YXRlIHRpbWVyJDtcbiAgcHJpdmF0ZSB0aW1lT3V0TWlsbGlTZWNvbmRzOiBudW1iZXI7XG4gIHByaXZhdGUgaWRsZVN1YnNjcmlwdGlvbjtcblxuICBwdWJsaWMgZXhwaXJlZCQ6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBwdWJsaWMgc3RhcnRXYXRjaGluZyh0aW1lT3V0U2Vjb25kcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgdGhpcy5pZGxlJCA9IG1lcmdlKFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnbW9zdWVtb3ZlJyksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpLFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnbW91c2Vkb3duJyksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXlwcmVzcycpLFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnRE9NTW91c2VTY3JvbGwnKSxcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNld2hlZWwnKSxcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ3RvdWNobW92ZScpLFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnTVNQb2ludGVyTW92ZScpLFxuICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ21vdXNlbW92ZScpLFxuICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpLFxuICAgICk7XG5cbiAgICB0aGlzLnRpbWVPdXRNaWxsaVNlY29uZHMgPSB0aW1lT3V0U2Vjb25kcyAqIDEwMDA7XG5cbiAgICB0aGlzLmlkbGVTdWJzY3JpcHRpb24gPSB0aGlzLmlkbGUkLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0VGltZXIoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc3RhcnRUaW1lcigpO1xuXG4gICAgcmV0dXJuIHRoaXMuZXhwaXJlZCQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0VGltZXIoKSB7XG4gICB0aGlzLnRpbWVyJCA9IHRpbWVyKHRoaXMudGltZU91dE1pbGxpU2Vjb25kcyx0aGlzLnRpbWVPdXRNaWxsaVNlY29uZHMpLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICB0aGlzLmV4cGlyZWQkLm5leHQodHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXRUaW1lcigpIHtcbiAgICB0aGlzLnRpbWVyJC51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuc3RhcnRUaW1lcigpO1xuICB9XG5cbiAgcHVibGljIHN0b3BUaW1lcigpIHtcbiAgICB0aGlzLnRpbWVyJC51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuaWRsZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQm5OZ0lkbGVTZXJ2aWNlIH0gZnJvbSAnLi9ibi1uZy1pZGxlLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIHByb3ZpZGVyczogW0JuTmdJZGxlU2VydmljZV0sXG4gIGV4cG9ydHM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEJuTmdJZGxlTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtJQWdCRTt3QkFGb0MsSUFBSSxPQUFPLEVBQVc7S0FJekQ7Ozs7O0lBRU0sdUNBQWE7Ozs7Y0FBQyxjQUFjOztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FDaEIsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaEMsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFDNUIsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaEMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsRUFDL0IsU0FBUyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxFQUNyQyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUNqQyxTQUFTLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxFQUNoQyxTQUFTLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxFQUNwQyxTQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUM5QixTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUM1QixDQUFDO1FBRUYsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFFakQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBRztZQUMvQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQzs7Ozs7SUFHZixvQ0FBVTs7Ozs7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEdBQUc7WUFDbEYsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUIsQ0FBQyxDQUFDOzs7OztJQUdFLG9DQUFVOzs7O1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Ozs7O0lBR2IsbUNBQVM7Ozs7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7O2dCQXREdkMsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7MEJBTkQ7Ozs7Ozs7QUNBQTs7OztnQkFHQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQ1I7b0JBQ0QsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQztvQkFDNUIsT0FBTyxFQUFFLEVBQUU7aUJBQ1o7O3lCQVREOzs7Ozs7Ozs7Ozs7Ozs7In0=