{"version":3,"sources":["ng://bn-ng-idle/lib/bn-ng-idle.service.ts","ng://bn-ng-idle/lib/bn-ng-idle.module.ts"],"names":["BnNgIdleService","Subject","prototype","startWatching","timeOutSeconds","this","idle$","merge","fromEvent","document","window","timeOutMilliSeconds","idleSubscription","subscribe","res","_this","resetTimer","startTimer","expired$","timer$","timer","next","unsubscribe","stopTimer","Injectable","args","providedIn","BnNgIdleModule","NgModule","imports","declarations","providers","exports"],"mappings":"kSAAA,IAAAA,EAAA,WAgBE,SAAAA,kBAFoC,IAAIC,EAAAA,eAMjCD,EAAAE,UAAAC,uBAAcC,cAsBnB,OArBAC,KAAKC,MAAQC,EAAAA,MACXC,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,SACpBD,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,YACpBD,EAAAA,UAAUC,SAAU,kBACpBD,EAAAA,UAAUC,SAAU,cACpBD,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,iBACpBD,EAAAA,UAAUE,OAAQ,aAClBF,EAAAA,UAAUE,OAAQ,WAGpBL,KAAKM,oBAAuC,IAAjBP,EAE3BC,KAAKO,iBAAmBP,KAAKC,MAAMO,UAAU,SAACC,GAC5CC,EAAKC,eAGPX,KAAKY,aAEEZ,KAAKa,UAGNlB,EAAAE,UAAAe,iCACPZ,KAAKc,OAASC,EAAAA,MAAMf,KAAKM,oBAAoBN,KAAKM,qBAAqBE,UAAU,SAACC,GAC/EC,EAAKG,SAASG,MAAK,MAIhBrB,EAAAE,UAAAc,sBACLX,KAAKc,OAAOG,cACZjB,KAAKY,cAGAjB,EAAAE,UAAAqB,qBACLlB,KAAKc,OAAOG,cACZjB,KAAKO,iBAAiBU,mCAtDzBE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJALd,GCAAC,EAAA,oDAGCC,EAAAA,SAAQH,KAAA,CAAC,CACRI,QAAS,GAETC,aAAc,GACdC,UAAW,CAAC/B,GACZgC,QAAS,SARX","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, fromEvent, merge, Subject, timer } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BnNgIdleService {\n\n  private idle$: Observable<any>;\n  private timer$;\n  private timeOutMilliSeconds: number;\n  private idleSubscription;\n\n  public expired$: Subject<boolean> = new Subject<boolean>();\n\n  constructor() {\n\n  }\n\n  public startWatching(timeOutSeconds): Observable<any> {\n    this.idle$ = merge(\n      fromEvent(document, 'mosuemove'),\n      fromEvent(document, 'click'),\n      fromEvent(document, 'mousedown'),\n      fromEvent(document, 'keypress'),\n      fromEvent(document, 'DOMMouseScroll'),\n      fromEvent(document, 'mousewheel'),\n      fromEvent(document, 'touchmove'),\n      fromEvent(document, 'MSPointerMove'),\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n    );\n\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n\n    this.idleSubscription = this.idle$.subscribe((res) => {\n      this.resetTimer();\n    });\n\n    this.startTimer();\n\n    return this.expired$;\n  }\n\n  private startTimer() {\n   this.timer$ = timer(this.timeOutMilliSeconds,this.timeOutMilliSeconds).subscribe((res) => {\n      this.expired$.next(true);\n    });\n  }\n\n  public resetTimer() {\n    this.timer$.unsubscribe();\n    this.startTimer();\n  }\n\n  public stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BnNgIdleService } from './bn-ng-idle.service';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [],\n  providers: [BnNgIdleService],\n  exports: []\n})\nexport class BnNgIdleModule { }\n"]}