(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('bn-ng-idle', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global['bn-ng-idle'] = {}),global.ng.core,global.rxjs));
}(this, (function (exports,i0,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BnNgIdleService = (function () {
        function BnNgIdleService() {
            this.expired$ = new rxjs.Subject();
        }
        /**
         * @param {?} timeOutSeconds
         * @return {?}
         */
        BnNgIdleService.prototype.startWatching = /**
         * @param {?} timeOutSeconds
         * @return {?}
         */
            function (timeOutSeconds) {
                var _this = this;
                this.idle$ = rxjs.merge(rxjs.fromEvent(document, 'mosuemove'), rxjs.fromEvent(document, 'click'), rxjs.fromEvent(document, 'mousedown'), rxjs.fromEvent(document, 'keypress'), rxjs.fromEvent(document, 'DOMMouseScroll'), rxjs.fromEvent(document, 'mousewheel'), rxjs.fromEvent(document, 'touchmove'), rxjs.fromEvent(document, 'MSPointerMove'), rxjs.fromEvent(window, 'mousemove'), rxjs.fromEvent(window, 'resize'));
                this.timeOutMilliSeconds = timeOutSeconds * 1000;
                this.idleSubscription = this.idle$.subscribe(function (res) {
                    _this.resetTimer();
                });
                this.startTimer();
                return this.expired$;
            };
        /**
         * @return {?}
         */
        BnNgIdleService.prototype.startTimer = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.timer$ = rxjs.timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe(function (res) {
                    _this.expired$.next(true);
                });
            };
        /**
         * @return {?}
         */
        BnNgIdleService.prototype.resetTimer = /**
         * @return {?}
         */
            function () {
                this.timer$.unsubscribe();
                this.startTimer();
            };
        /**
         * @return {?}
         */
        BnNgIdleService.prototype.stopTimer = /**
         * @return {?}
         */
            function () {
                this.timer$.unsubscribe();
                this.idleSubscription.unsubscribe();
            };
        BnNgIdleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        BnNgIdleService.ctorParameters = function () { return []; };
        /** @nocollapse */ BnNgIdleService.ngInjectableDef = i0.defineInjectable({ factory: function BnNgIdleService_Factory() { return new BnNgIdleService(); }, token: BnNgIdleService, providedIn: "root" });
        return BnNgIdleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BnNgIdleModule = (function () {
        function BnNgIdleModule() {
        }
        BnNgIdleModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        providers: [BnNgIdleService],
                        exports: []
                    },] },
        ];
        return BnNgIdleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BnNgIdleService = BnNgIdleService;
    exports.BnNgIdleModule = BnNgIdleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm4tbmctaWRsZS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL2JuLW5nLWlkbGUvbGliL2JuLW5nLWlkbGUuc2VydmljZS50cyIsIm5nOi8vYm4tbmctaWRsZS9saWIvYm4tbmctaWRsZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbUV2ZW50LCBtZXJnZSwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBCbk5nSWRsZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgaWRsZSQ6IE9ic2VydmFibGU8YW55PjtcbiAgcHJpdmF0ZSB0aW1lciQ7XG4gIHByaXZhdGUgdGltZU91dE1pbGxpU2Vjb25kczogbnVtYmVyO1xuICBwcml2YXRlIGlkbGVTdWJzY3JpcHRpb247XG5cbiAgcHVibGljIGV4cGlyZWQkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcHVibGljIHN0YXJ0V2F0Y2hpbmcodGltZU91dFNlY29uZHMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuaWRsZSQgPSBtZXJnZShcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vc3VlbW92ZScpLFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKSxcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNlZG93bicpLFxuICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAna2V5cHJlc3MnKSxcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ0RPTU1vdXNlU2Nyb2xsJyksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZXdoZWVsJyksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd0b3VjaG1vdmUnKSxcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ01TUG9pbnRlck1vdmUnKSxcbiAgICAgIGZyb21FdmVudCh3aW5kb3csICdtb3VzZW1vdmUnKSxcbiAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKSxcbiAgICApO1xuXG4gICAgdGhpcy50aW1lT3V0TWlsbGlTZWNvbmRzID0gdGltZU91dFNlY29uZHMgKiAxMDAwO1xuXG4gICAgdGhpcy5pZGxlU3Vic2NyaXB0aW9uID0gdGhpcy5pZGxlJC5zdWJzY3JpYmUoKHJlcykgPT4ge1xuICAgICAgdGhpcy5yZXNldFRpbWVyKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YXJ0VGltZXIoKTtcblxuICAgIHJldHVybiB0aGlzLmV4cGlyZWQkO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFRpbWVyKCkge1xuICAgdGhpcy50aW1lciQgPSB0aW1lcih0aGlzLnRpbWVPdXRNaWxsaVNlY29uZHMsdGhpcy50aW1lT3V0TWlsbGlTZWNvbmRzKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xuICAgICAgdGhpcy5leHBpcmVkJC5uZXh0KHRydWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlc2V0VGltZXIoKSB7XG4gICAgdGhpcy50aW1lciQudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN0YXJ0VGltZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wVGltZXIoKSB7XG4gICAgdGhpcy50aW1lciQudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLmlkbGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJuTmdJZGxlU2VydmljZSB9IGZyb20gJy4vYm4tbmctaWRsZS5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtdLFxuICBwcm92aWRlcnM6IFtCbk5nSWRsZVNlcnZpY2VdLFxuICBleHBvcnRzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBCbk5nSWRsZU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6WyJTdWJqZWN0IiwibWVyZ2UiLCJmcm9tRXZlbnQiLCJ0aW1lciIsIkluamVjdGFibGUiLCJOZ01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBZ0JFOzRCQUZvQyxJQUFJQSxZQUFPLEVBQVc7U0FJekQ7Ozs7O1FBRU0sdUNBQWE7Ozs7c0JBQUMsY0FBYzs7Z0JBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUdDLFVBQUssQ0FDaEJDLGNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQ2hDQSxjQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUM1QkEsY0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaENBLGNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLEVBQy9CQSxjQUFTLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLEVBQ3JDQSxjQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUNqQ0EsY0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaENBLGNBQVMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLEVBQ3BDQSxjQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUM5QkEsY0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FDNUIsQ0FBQztnQkFFRixJQUFJLENBQUMsbUJBQW1CLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFFakQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBRztvQkFDL0MsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2lCQUNuQixDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUVsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Ozs7O1FBR2Ysb0NBQVU7Ozs7O2dCQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHQyxVQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEdBQUc7b0JBQ2xGLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMxQixDQUFDLENBQUM7Ozs7O1FBR0Usb0NBQVU7Ozs7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDOzs7OztRQUdiLG1DQUFTOzs7O2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7O29CQXREdkNDLGFBQVUsU0FBQzt3QkFDVixVQUFVLEVBQUUsTUFBTTtxQkFDbkI7Ozs7OzhCQU5EOzs7Ozs7O0FDQUE7Ozs7b0JBR0NDLFdBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUUsRUFDUjt3QkFDRCxZQUFZLEVBQUUsRUFBRTt3QkFDaEIsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDO3dCQUM1QixPQUFPLEVBQUUsRUFBRTtxQkFDWjs7NkJBVEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==