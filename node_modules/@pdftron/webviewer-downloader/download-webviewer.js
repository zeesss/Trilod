const download = require('download');
const decompress = require('decompress');
const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');
const extract = require('extract-zip')

module.exports = (location, version, options) => {

  return new Promise(r => {
    let downloadedSize = 0;

    const CYAN = '\u001b[36m';
    const RESET = '\u001b[0m';
    const RED = '\u001b[31m';
    const GREEN = '\u001b[32m';
    const MAGENTA = '\u001b[35m';

    process.stdout.write('\n');
    console.log(`${MAGENTA}Extracting to ${location}${RESET}`);
    process.stdout.write('\n');

    let basename = options.pdfjs ? 'PDFJSExpress' : "WebViewer";

  
    fs.removeSync(location);
    fs.ensureDirSync(location);

    const zipName = version ? `${basename}-${version}.zip` : `${basename}.zip`

    let downloadURL = `https://www.pdftron.com/downloads/${zipName}`;

    download(downloadURL, location)
      .on('data', data => {
        readline.clearLine(process.stdout);
        readline.cursorTo(process.stdout, 0);
        downloadedSize += data.length;
        process.stdout.write(`${CYAN}Downloading ${basename}... ${(downloadedSize / 100000000 * 100).toFixed(1)}%${RESET}`);
      })
      .then(() => {
        readline.clearLine(process.stdout);
        readline.cursorTo(process.stdout, 0);
        process.stdout.write(`${CYAN}Downloading ${basename}... 100%${RESET}\n${GREEN}Download completed.${RESET}\n\n${CYAN}Extracting ${basename}...${RESET}`);

        extract(path.resolve(location, `./${zipName}`), { dir: location }, () => {
          try {
            // for newer versions
            fs.copySync(path.resolve(location, `./lib`), path.resolve(location)); // this will fail for older versions and drop into the catch
            fs.removeSync(path.resolve(location, `./lib`));
            fs.removeSync(path.resolve(location, `./doc`));
            fs.removeSync(path.resolve(location, `./licenses`));
            fs.removeSync(path.resolve(location, `./samples`));
            fs.removeSync(path.resolve(location, `./scripts`));
            fs.removeSync(path.resolve(location, `./server.js`));
          } catch (e) {
            // for older versions
            fs.copySync(path.resolve(location, `./${basename}/lib`), path.resolve(location));
            fs.removeSync(path.resolve(location, `./${basename}`));
          }

          fs.removeSync(path.resolve(location, './ui-legacy'));
          fs.removeSync(path.resolve(location, './webviewer.js'));

          // delete .min.js if we're using the NPM arcitecture (this is included in the package)
          if (options.npm) {
            fs.removeSync(path.resolve(location, './webviewer.min.js'));
            try {
              fs.removeSync(path.resolve(location, './types.d.ts'));
            } catch (e) {
              
            }
          }

          if (options.coreOnly) {
            fs.removeSync(path.resolve(location, './webviewer.min.js'));
            fs.removeSync(path.resolve(location, './ui'));
          } else {
            try {
              fs.moveSync(path.resolve(location, './ui/build'), path.resolve(location, './temp'));
              fs.removeSync(path.resolve(location, './ui'))
              fs.moveSync(path.resolve(location, './temp'), path.resolve(location, './ui/build'))
            } catch (e) {
              // nothing - already done
            }
          }

          fs.removeSync(path.resolve(location, version ? `./${basename}-${version}.zip` : `./${basename}.zip`));

          readline.clearLine(process.stdout);
          readline.cursorTo(process.stdout, 0);
          process.stdout.write(`${CYAN}Extracting ${basename}... 100%${CYAN}\n${GREEN}Extract completed.${RESET}\n\n\n`);

          if (options.npm) {
            console.log(`\n${GREEN}${basename} successfully installed! You now need to copy the static files required to use ${basename} into your ${MAGENTA}build/dist${GREEN} folder. See ${CYAN}http://r.pdftron.com/npm${GREEN} for more details.${RESET}\n`);
          }

          r();
          
        });
      });
  })
}

