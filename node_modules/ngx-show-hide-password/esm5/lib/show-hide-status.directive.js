/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, Input, ErrorHandler } from '@angular/core';
import { ShowHideService } from './show-hide.service';
/**
 * @record
 */
export function ShowHideStatusConfig() { }
if (false) {
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.id;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.show;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.hide;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.materialIcon;
}
var ShowHideStatusDirective = /** @class */ (function () {
    function ShowHideStatusDirective(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this.init(config);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ShowHideStatusDirective.prototype.init = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        /** @type {?} */
        var defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = tslib_1.__assign({}, defaultConfig, config);
        if (this.config.id) {
            this.subscription = this.service.getObservable(this.config.id).subscribe((/**
             * @param {?} show
             * @return {?}
             */
            function (show) { return _this.updateStatus(show); }));
        }
        else {
            this.errorHandler.handleError(new Error("No input id found. Please read the docs!"));
        }
    };
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    ShowHideStatusDirective.prototype.updateStatus = /**
     * @private
     * @param {?} show
     * @return {?}
     */
    function (show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    };
    /**
     * @return {?}
     */
    ShowHideStatusDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideStatusDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[showHideStatus]'
                },] }
    ];
    /** @nocollapse */
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ErrorHandler }
    ]; };
    ShowHideStatusDirective.propDecorators = {
        showHideStatus: [{ type: Input }]
    };
    return ShowHideStatusDirective;
}());
export { ShowHideStatusDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.errorHandler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFhLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBRXRELDBDQUtDOzs7SUFKQyxrQ0FBWTs7SUFDWixvQ0FBYzs7SUFDZCxvQ0FBYzs7SUFDZCw0Q0FBdUI7O0FBR3pCO0lBV0UsaUNBQ1UsT0FBd0IsRUFDeEIsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLFlBQTBCO1FBSDFCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQ2pDLENBQUM7SUFUSixzQkFBYSxtREFBYzs7Ozs7UUFBM0IsVUFBNEIsTUFBNEI7WUFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTs7Ozs7O0lBU08sc0NBQUk7Ozs7O0lBQVosVUFBYSxNQUE0QjtRQUF6QyxpQkFnQkM7O1lBZk8sYUFBYSxHQUFHO1lBQ3BCLElBQUksRUFBRSxZQUFZO1lBQ2xCLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsRUFBRSxFQUFFLElBQUk7U0FDVDtRQUNELElBQUksQ0FBQyxNQUFNLHdCQUNOLGFBQWEsRUFDYixNQUFNLENBQ1YsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQXZCLENBQXVCLEVBQUMsQ0FBQztTQUMzRzthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO1NBQ3RGO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sOENBQVk7Ozs7O0lBQXBCLFVBQXFCLElBQWE7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzRzthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0Y7SUFDSCxDQUFDOzs7O0lBRUQsNkNBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOztnQkFqREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCOzs7O2dCQVhRLGVBQWU7Z0JBRkosVUFBVTtnQkFBRSxTQUFTO2dCQUFvQixZQUFZOzs7aUNBa0J0RSxLQUFLOztJQTJDUiw4QkFBQztDQUFBLEFBbERELElBa0RDO1NBL0NZLHVCQUF1Qjs7Ozs7O0lBQ2xDLCtDQUFtQzs7Ozs7SUFDbkMseUNBQXFDOzs7OztJQU9uQywwQ0FBZ0M7Ozs7O0lBQ2hDLHFDQUFzQjs7Ozs7SUFDdEIsMkNBQTJCOzs7OztJQUMzQiwrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBJbnB1dCwgRXJyb3JIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNob3dIaWRlU2VydmljZSB9IGZyb20gJy4vc2hvdy1oaWRlLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNob3dIaWRlU3RhdHVzQ29uZmlnIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHNob3c/OiBzdHJpbmc7XG4gIGhpZGU/OiBzdHJpbmc7XG4gIG1hdGVyaWFsSWNvbj86IGJvb2xlYW47XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzaG93SGlkZVN0YXR1c10nXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU3RhdHVzRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnO1xuXG4gIEBJbnB1dCgpIHNldCBzaG93SGlkZVN0YXR1cyhjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnKSB7XG4gICAgdGhpcy5pbml0KGNvbmZpZyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNlcnZpY2U6IFNob3dIaWRlU2VydmljZSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge31cblxuICBwcml2YXRlIGluaXQoY29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZyk6IHZvaWQge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzaG93OiAndmlzaWJpbGl0eScsXG4gICAgICBoaWRlOiAndmlzaWJpbGl0eV9vZmYnLFxuICAgICAgbWF0ZXJpYWxJY29uOiBmYWxzZSxcbiAgICAgIGlkOiBudWxsXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLmRlZmF1bHRDb25maWcsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICAgIGlmICh0aGlzLmNvbmZpZy5pZCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2UuZ2V0T2JzZXJ2YWJsZSh0aGlzLmNvbmZpZy5pZCkuc3Vic2NyaWJlKHNob3cgPT4gdGhpcy51cGRhdGVTdGF0dXMoc2hvdykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihuZXcgRXJyb3IoYE5vIGlucHV0IGlkIGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0dXMoc2hvdzogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmNvbmZpZy5tYXRlcmlhbEljb24pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnaW5uZXJIVE1MJywgc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICFzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHNob3cgPyB0aGlzLmNvbmZpZy5oaWRlIDogdGhpcy5jb25maWcuc2hvdyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19