/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function IState() { }
if (false) {
    /** @type {?} */
    IState.prototype.id;
    /** @type {?} */
    IState.prototype.show;
    /** @type {?|undefined} */
    IState.prototype.subject;
}
var ShowHideService = /** @class */ (function () {
    function ShowHideService() {
        this.states = [];
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getIO = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.states.find((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o.id === id; }));
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.init = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var subject = new ReplaySubject(1);
        /** @type {?} */
        var io = {
            id: id,
            show: false,
            subject: subject
        };
        this.states.push(io);
        return io;
    };
    /**
     * @private
     * @param {?} io
     * @param {?} show
     * @return {?}
     */
    ShowHideService.prototype.saveAndProadcast = /**
     * @private
     * @param {?} io
     * @param {?} show
     * @return {?}
     */
    function (io, show) {
        io.show = show;
        io.subject.next(io.show);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getObservable = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getIO(id).subject;
    };
    /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    ShowHideService.prototype.setShow = /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    function (id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.toggleShow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    };
    ShowHideService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ShowHideService.ctorParameters = function () { return []; };
    /** @nocollapse */ ShowHideService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    return ShowHideService;
}());
export { ShowHideService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideService.prototype.states;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUUxRCxxQkFJQzs7O0lBSEMsb0JBQVc7O0lBQ1gsc0JBQWM7O0lBQ2QseUJBQTJCOztBQUc3QjtJQU1FO1FBRmlCLFdBQU0sR0FBRyxFQUFFLENBQUM7SUFFZCxDQUFDOzs7Ozs7SUFFUiwrQkFBSzs7Ozs7SUFBYixVQUFjLEVBQVU7O1lBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFYLENBQVcsRUFBQztRQUMzQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNiLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7SUFFTyw4QkFBSTs7Ozs7SUFBWixVQUFhLEVBQVU7O1lBQ2YsT0FBTyxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQzs7WUFDdkMsRUFBRSxHQUFHO1lBQ1QsRUFBRSxJQUFBO1lBQ0YsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLFNBQUE7U0FDUjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7OztJQUVPLDBDQUFnQjs7Ozs7O0lBQXhCLFVBQXlCLEVBQVUsRUFBRSxJQUFhO1FBQ2hELEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU0sdUNBQWE7Ozs7SUFBcEIsVUFBcUIsRUFBVTtRQUM3QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ2hDLENBQUM7Ozs7OztJQUVNLGlDQUFPOzs7OztJQUFkLFVBQWUsRUFBVSxFQUFFLElBQWE7UUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFTSxvQ0FBVTs7OztJQUFqQixVQUFrQixFQUFVOztZQUNwQixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDOztnQkEzQ0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7MEJBWEQ7Q0FxREMsQUE1Q0QsSUE0Q0M7U0F6Q1ksZUFBZTs7Ozs7O0lBQzFCLGlDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3c6IGJvb2xlYW47XG4gIHN1YmplY3Q/OiBTdWJqZWN0PGJvb2xlYW4+O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXRlcyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwcml2YXRlIGdldElPKGlkOiBzdHJpbmcpOiBJU3RhdGUge1xuICAgIGxldCBpbyA9IHRoaXMuc3RhdGVzLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XG4gICAgaWYgKCFpbyAmJiBpZCkge1xuICAgICAgaW8gPSB0aGlzLmluaXQoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwcml2YXRlIGluaXQoaWQ6IHN0cmluZyk6IElTdGF0ZSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICAgIGNvbnN0IGlvID0ge1xuICAgICAgaWQsXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIHN1YmplY3RcbiAgICB9O1xuICAgIHRoaXMuc3RhdGVzLnB1c2goaW8pO1xuICAgIHJldHVybiBpbztcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUFuZFByb2FkY2FzdChpbzogSVN0YXRlLCBzaG93OiBib29sZWFuKSB7XG4gICAgaW8uc2hvdyA9IHNob3c7XG4gICAgaW8uc3ViamVjdC5uZXh0KGlvLnNob3cpO1xuICB9XG5cbiAgcHVibGljIGdldE9ic2VydmFibGUoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmdldElPKGlkKS5zdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIHNldFNob3coaWQ6IHN0cmluZywgc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2F2ZUFuZFByb2FkY2FzdCh0aGlzLmdldElPKGlkKSwgc2hvdyk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlU2hvdyhpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSB0aGlzLmdldElPKGlkKTtcbiAgICB0aGlzLnNhdmVBbmRQcm9hZGNhc3QoaW8sICFpby5zaG93KTtcbiAgfVxufVxuIl19