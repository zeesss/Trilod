/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { ShowHideService } from './show-hide.service';
var ShowHideInputDirective = /** @class */ (function () {
    function ShowHideInputDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error("No input id found. Please read the docs!");
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe((/**
         * @param {?} show
         * @return {?}
         */
        function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); }));
    };
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[showHideInput]'
                },] }
    ];
    /** @nocollapse */
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ShowHideInputDirective;
}());
export { ShowHideInputDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdEQ7SUFPRSxnQ0FBb0IsT0FBd0IsRUFBVSxFQUFjLEVBQVUsUUFBbUI7UUFBN0UsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUMvRixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Ozs7SUFFRCx5Q0FBUTs7O0lBQVI7UUFBQSxpQkFJQztRQUhDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDN0IsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDdEIsU0FBUzs7OztRQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBckYsQ0FBcUYsRUFBQyxDQUFDO0lBQzlHLENBQUM7Ozs7SUFFRCw0Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7O2dCQXpCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtpQkFDakM7Ozs7Z0JBTFEsZUFBZTtnQkFESixVQUFVO2dCQUFFLFNBQVM7O0lBOEJ6Qyw2QkFBQztDQUFBLEFBMUJELElBMEJDO1NBdkJZLHNCQUFzQjs7Ozs7O0lBQ2pDLDhDQUFtQzs7Ozs7SUFDbkMsb0NBQW1COzs7OztJQUVQLHlDQUFnQzs7Ozs7SUFBRSxvQ0FBc0I7Ozs7O0lBQUUsMENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaG93SGlkZVNlcnZpY2UgfSBmcm9tICcuL3Nob3ctaGlkZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtzaG93SGlkZUlucHV0XSdcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBpZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLmlkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gaW5wdXQgaWQgZm91bmQuIFBsZWFzZSByZWFkIHRoZSBkb2NzIWApO1xuICAgIH1cbiAgICB0aGlzLnNlcnZpY2Uuc2V0U2hvdyh0aGlzLmlkLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudHlwZSAhPT0gJ3Bhc3N3b3JkJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZVxuICAgICAgLmdldE9ic2VydmFibGUodGhpcy5pZClcbiAgICAgIC5zdWJzY3JpYmUoc2hvdyA9PiB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd0eXBlJywgc2hvdyA/ICd0ZXh0JyA6ICdwYXNzd29yZCcpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==