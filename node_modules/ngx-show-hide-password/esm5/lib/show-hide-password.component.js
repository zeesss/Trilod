/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { ShowHideService } from './show-hide.service';
/** @enum {string} */
var BtnStyle = {
    Primary: 'primary',
    Secondary: 'secondary',
    Success: 'success',
    Danger: 'danger',
    Warning: 'warning',
    Info: 'info',
    Dark: 'dark',
    Light: 'light',
};
export { BtnStyle };
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * \@example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
var ShowHidePasswordComponent = /** @class */ (function () {
    function ShowHidePasswordComponent(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    /**
     * @return {?}
     */
    ShowHidePasswordComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error("No input element found. Please read the docs!");
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput' + Math.round(Math.random() * 100000);
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe((/**
         * @param {?} show
         * @return {?}
         */
        function (show) {
            _this.isHidden = !show;
            _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
        }));
    };
    /**
     * @return {?}
     */
    ShowHidePasswordComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHidePasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'show-hide-password',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n  <ng-content></ng-content>\n  <div class=\"input-group-append ngx-show-hide-password\">\n    <button class=\"btn\" [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n      type=\"button\" [showHideTrigger]=\"id\">\n      <fa-icon [fixedWidth]=\"true\" size=\"lg\" [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n        [showHideStatus]=\"{id: id}\"></fa-icon>\n    </button>\n  </div>\n"
                }] }
    ];
    /** @nocollapse */
    ShowHidePasswordComponent.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ShowHidePasswordComponent.propDecorators = {
        btnStyle: [{ type: Input }],
        btnOutline: [{ type: Input }],
        size: [{ type: Input }]
    };
    return ShowHidePasswordComponent;
}());
export { ShowHidePasswordComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.subscription;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnStyle;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnOutline;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.size;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.input;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.isHidden;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.id;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEye;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEyeSlash;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSx1QkFBdUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0lBR3BELFNBQVUsU0FBUztJQUNuQixXQUFZLFdBQVc7SUFDdkIsU0FBVSxTQUFTO0lBQ25CLFFBQVMsUUFBUTtJQUNqQixTQUFVLFNBQVM7SUFDbkIsTUFBTyxNQUFNO0lBQ2IsTUFBTyxNQUFNO0lBQ2IsT0FBUSxPQUFPOzs7Ozs7Ozs7OztBQVdqQjtJQW1DRSxtQ0FBb0IsT0FBd0IsRUFBVSxJQUFnQixFQUFVLFFBQW1CO1FBQS9FLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFqQjVGLGFBQVEsR0FBYSxRQUFRLENBQUMsU0FBUyxDQUFDO1FBR3hDLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFXekIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLGVBQVUsR0FBRyxVQUFVLENBQUM7SUFFOEUsQ0FBQzs7OztJQUV2Ryw0Q0FBUTs7O0lBQVI7UUFBQSxpQkF1QkM7UUF0QkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7U0FDbEU7UUFDRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDL0QsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25FO2FBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtRQUN0RSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLElBQUk7WUFDcEUsS0FBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN0QixLQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0UsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsK0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOztnQkFsRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsNlpBU1g7aUJBQ0E7Ozs7Z0JBbENRLGVBQWU7Z0JBSEosVUFBVTtnQkFBaUIsU0FBUzs7OzJCQXlDckQsS0FBSzs2QkFHTCxLQUFLO3VCQUdMLEtBQUs7O0lBNENSLGdDQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0FyRFkseUJBQXlCOzs7Ozs7SUFDcEMsaURBQW1DOztJQUVuQyw2Q0FDK0M7O0lBRS9DLCtDQUN5Qjs7SUFFekIseUNBQ3lCOztJQUV6QiwwQ0FBa0I7O0lBRWxCLDZDQUF5Qjs7SUFFekIsdUNBQWtCOztJQUVsQiwwQ0FBYzs7SUFDZCwrQ0FBd0I7Ozs7O0lBRVosNENBQWdDOzs7OztJQUFFLHlDQUF3Qjs7Ozs7SUFBRSw2Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmYUV5ZSwgZmFFeWVTbGFzaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7XG5pbXBvcnQgeyBTaG93SGlkZVNlcnZpY2UgfSBmcm9tICcuL3Nob3ctaGlkZS5zZXJ2aWNlJztcblxuZXhwb3J0IGVudW0gQnRuU3R5bGUge1xuICBQcmltYXJ5ID0gJ3ByaW1hcnknLFxuICBTZWNvbmRhcnkgPSAnc2Vjb25kYXJ5JyxcbiAgU3VjY2VzcyA9ICdzdWNjZXNzJyxcbiAgRGFuZ2VyID0gJ2RhbmdlcicsXG4gIFdhcm5pbmcgPSAnd2FybmluZycsXG4gIEluZm8gPSAnaW5mbycsXG4gIERhcmsgPSAnZGFyaycsXG4gIExpZ2h0ID0gJ2xpZ2h0J1xufVxuXG4vKipcbiAqIEFkZCBhIHNwbGl0IGlucHV0IGJ1dHRvbiB0byBwYXNzd29yZCBvciB0ZXh0IGlucHV0LiBUb2dnbGVzIGlucHV0IHR5cGUgYmV0d2VlbiBcInRleHRcIiBhbmQgXCJwYXNzd29yZFwiLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8c2hvdy1oaWRlLXBhc3N3b3JkIHNpemU9XCJzbXxsZ1wiPlxuICogPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9Li4uIC8+XG4gKiA8L3Nob3ctaGlkZS1wYXNzd29yZD5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2hvdy1oaWRlLXBhc3N3b3JkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgXG4gIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZCBuZ3gtc2hvdy1oaWRlLXBhc3N3b3JkXCI+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIFtuZ0NsYXNzXT1cIihidG5PdXRsaW5lID8gJ2J0bi1vdXRsaW5lLScgKyBidG5TdHlsZSA6ICdidG4tJyArIGJ0blN0eWxlKVwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCIgW3Nob3dIaWRlVHJpZ2dlcl09XCJpZFwiPlxuICAgICAgPGZhLWljb24gW2ZpeGVkV2lkdGhdPVwidHJ1ZVwiIHNpemU9XCJsZ1wiIFtpY29uXT1cIihpc0hpZGRlbiA/IGZhRXllIDogZmFFeWVTbGFzaClcIlxuICAgICAgICBbc2hvd0hpZGVTdGF0dXNdPVwie2lkOiBpZH1cIj48L2ZhLWljb24+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBTaG93SGlkZVBhc3N3b3JkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBidG5TdHlsZTogQnRuU3R5bGUgPSBCdG5TdHlsZS5TZWNvbmRhcnk7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGJ0bk91dGxpbmUgPSB0cnVlO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzaXplOiAnc20nIHwgJ2xnJztcblxuICBwdWJsaWMgaW5wdXQ6IGFueTtcblxuICBwdWJsaWMgaXNIaWRkZW46IGJvb2xlYW47XG5cbiAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgZmFFeWUgPSBmYUV5ZTtcbiAgZmFFeWVTbGFzaCA9IGZhRXllU2xhc2g7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBTaG93SGlkZVNlcnZpY2UsIHByaXZhdGUgZWxlbTogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5wdXQgPSB0aGlzLmVsZW0ubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIGlmICghdGhpcy5pbnB1dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBpbnB1dCBlbGVtZW50IGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKTtcbiAgICB9XG4gICAgdGhpcy5pZCA9IHRoaXMuaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgdGhpcy5pZCA9ICdzaG93SGlkZUlucHV0JyArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmlucHV0LCAnaWQnLCB0aGlzLmlkKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW0ubmF0aXZlRWxlbWVudCwgJ2lucHV0LWdyb3VwJyk7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gJ3NtJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW0ubmF0aXZlRWxlbWVudCwgJ2lucHV0LWdyb3VwLXNtJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNpemUgPT09ICdsZycpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdpbnB1dC1ncm91cC1sZycpO1xuICAgIH1cbiAgICB0aGlzLmlzSGlkZGVuID0gdGhpcy5pbnB1dC50eXBlID09PSAncGFzc3dvcmQnO1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5pbnB1dCwgJ2Zvcm0tY29udHJvbCcpOyAvLyBqdXN0IHRvIGJlIHN1cmVcbiAgICB0aGlzLnNlcnZpY2Uuc2V0U2hvdyh0aGlzLmlkLCB0aGlzLmlucHV0LnR5cGUgIT09ICdwYXNzd29yZCcpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlLmdldE9ic2VydmFibGUodGhpcy5pZCkuc3Vic2NyaWJlKHNob3cgPT4ge1xuICAgICAgdGhpcy5pc0hpZGRlbiA9ICFzaG93O1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5pbnB1dCwgJ3R5cGUnLCBzaG93ID8gJ3RleHQnIDogJ3Bhc3N3b3JkJyk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=