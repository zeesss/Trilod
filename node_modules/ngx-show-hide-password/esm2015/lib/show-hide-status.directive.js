/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, ErrorHandler } from '@angular/core';
import { ShowHideService } from './show-hide.service';
/**
 * @record
 */
export function ShowHideStatusConfig() { }
if (false) {
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.id;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.show;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.hide;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.materialIcon;
}
export class ShowHideStatusDirective {
    /**
     * @param {?} service
     * @param {?} el
     * @param {?} renderer
     * @param {?} errorHandler
     */
    constructor(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    set showHideStatus(config) {
        this.init(config);
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    init(config) {
        /** @type {?} */
        const defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = Object.assign({}, defaultConfig, config);
        if (this.config.id) {
            this.subscription = this.service.getObservable(this.config.id).subscribe((/**
             * @param {?} show
             * @return {?}
             */
            show => this.updateStatus(show)));
        }
        else {
            this.errorHandler.handleError(new Error(`No input id found. Please read the docs!`));
        }
    }
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideStatus]'
            },] }
];
/** @nocollapse */
ShowHideStatusDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ErrorHandler }
];
ShowHideStatusDirective.propDecorators = {
    showHideStatus: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.errorHandler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkLyIsInNvdXJjZXMiOlsibGliL3Nob3ctaGlkZS1zdGF0dXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFFdEQsMENBS0M7OztJQUpDLGtDQUFZOztJQUNaLG9DQUFjOztJQUNkLG9DQUFjOztJQUNkLDRDQUF1Qjs7QUFNekIsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7OztJQVFsQyxZQUNVLE9BQXdCLEVBQ3hCLEVBQWMsRUFDZCxRQUFtQixFQUNuQixZQUEwQjtRQUgxQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN4QixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUNqQyxDQUFDOzs7OztJQVRKLElBQWEsY0FBYyxDQUFDLE1BQTRCO1FBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBU08sSUFBSSxDQUFDLE1BQTRCOztjQUNqQyxhQUFhLEdBQUc7WUFDcEIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixZQUFZLEVBQUUsS0FBSztZQUNuQixFQUFFLEVBQUUsSUFBSTtTQUNUO1FBQ0QsSUFBSSxDQUFDLE1BQU0scUJBQ04sYUFBYSxFQUNiLE1BQU0sQ0FDVixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDO1NBQzNHO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUM7U0FDdEY7SUFDSCxDQUFDOzs7Ozs7SUFFTyxZQUFZLENBQUMsSUFBYTtRQUNoQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNHO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzRjtJQUNILENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7WUFqREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7YUFDN0I7Ozs7WUFYUSxlQUFlO1lBRkosVUFBVTtZQUFFLFNBQVM7WUFBb0IsWUFBWTs7OzZCQWtCdEUsS0FBSzs7Ozs7OztJQUhOLCtDQUFtQzs7Ozs7SUFDbkMseUNBQXFDOzs7OztJQU9uQywwQ0FBZ0M7Ozs7O0lBQ2hDLHFDQUFzQjs7Ozs7SUFDdEIsMkNBQTJCOzs7OztJQUMzQiwrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBJbnB1dCwgRXJyb3JIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNob3dIaWRlU2VydmljZSB9IGZyb20gJy4vc2hvdy1oaWRlLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNob3dIaWRlU3RhdHVzQ29uZmlnIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHNob3c/OiBzdHJpbmc7XG4gIGhpZGU/OiBzdHJpbmc7XG4gIG1hdGVyaWFsSWNvbj86IGJvb2xlYW47XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzaG93SGlkZVN0YXR1c10nXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU3RhdHVzRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnO1xuXG4gIEBJbnB1dCgpIHNldCBzaG93SGlkZVN0YXR1cyhjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnKSB7XG4gICAgdGhpcy5pbml0KGNvbmZpZyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNlcnZpY2U6IFNob3dIaWRlU2VydmljZSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge31cblxuICBwcml2YXRlIGluaXQoY29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZyk6IHZvaWQge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzaG93OiAndmlzaWJpbGl0eScsXG4gICAgICBoaWRlOiAndmlzaWJpbGl0eV9vZmYnLFxuICAgICAgbWF0ZXJpYWxJY29uOiBmYWxzZSxcbiAgICAgIGlkOiBudWxsXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLmRlZmF1bHRDb25maWcsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICAgIGlmICh0aGlzLmNvbmZpZy5pZCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2UuZ2V0T2JzZXJ2YWJsZSh0aGlzLmNvbmZpZy5pZCkuc3Vic2NyaWJlKHNob3cgPT4gdGhpcy51cGRhdGVTdGF0dXMoc2hvdykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihuZXcgRXJyb3IoYE5vIGlucHV0IGlkIGZvdW5kLiBQbGVhc2UgcmVhZCB0aGUgZG9jcyFgKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdGF0dXMoc2hvdzogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmNvbmZpZy5tYXRlcmlhbEljb24pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnaW5uZXJIVE1MJywgc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICFzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHNob3cgPyB0aGlzLmNvbmZpZy5oaWRlIDogdGhpcy5jb25maWcuc2hvdyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19