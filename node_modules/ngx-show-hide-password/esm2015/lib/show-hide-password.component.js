/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { ShowHideService } from './show-hide.service';
/** @enum {string} */
const BtnStyle = {
    Primary: 'primary',
    Secondary: 'secondary',
    Success: 'success',
    Danger: 'danger',
    Warning: 'warning',
    Info: 'info',
    Dark: 'dark',
    Light: 'light',
};
export { BtnStyle };
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * \@example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
export class ShowHidePasswordComponent {
    /**
     * @param {?} service
     * @param {?} elem
     * @param {?} renderer
     */
    constructor(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error(`No input element found. Please read the docs!`);
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput' + Math.round(Math.random() * 100000);
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe((/**
         * @param {?} show
         * @return {?}
         */
        show => {
            this.isHidden = !show;
            this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHidePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'show-hide-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <ng-content></ng-content>
  <div class="input-group-append ngx-show-hide-password">
    <button class="btn" [ngClass]="(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)"
      type="button" [showHideTrigger]="id">
      <fa-icon [fixedWidth]="true" size="lg" [icon]="(isHidden ? faEye : faEyeSlash)"
        [showHideStatus]="{id: id}"></fa-icon>
    </button>
  </div>
`
            }] }
];
/** @nocollapse */
ShowHidePasswordComponent.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHidePasswordComponent.propDecorators = {
    btnStyle: [{ type: Input }],
    btnOutline: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.subscription;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnStyle;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnOutline;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.size;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.input;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.isHidden;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.id;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEye;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEyeSlash;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaG93LWhpZGUtcGFzc3dvcmQvIiwic291cmNlcyI6WyJsaWIvc2hvdy1oaWRlLXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSx1QkFBdUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0lBR3BELFNBQVUsU0FBUztJQUNuQixXQUFZLFdBQVc7SUFDdkIsU0FBVSxTQUFTO0lBQ25CLFFBQVMsUUFBUTtJQUNqQixTQUFVLFNBQVM7SUFDbkIsTUFBTyxNQUFNO0lBQ2IsTUFBTyxNQUFNO0lBQ2IsT0FBUSxPQUFPOzs7Ozs7Ozs7OztBQXlCakIsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7O0lBcUJwQyxZQUFvQixPQUF3QixFQUFVLElBQWdCLEVBQVUsUUFBbUI7UUFBL0UsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWpCNUYsYUFBUSxHQUFhLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFHeEMsZUFBVSxHQUFHLElBQUksQ0FBQztRQVd6QixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsZUFBVSxHQUFHLFVBQVUsQ0FBQztJQUU4RSxDQUFDOzs7O0lBRXZHLFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztTQUNsRTtRQUNELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWixJQUFJLENBQUMsRUFBRSxHQUFHLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMvRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7U0FDbkU7YUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7U0FDbkU7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCO1FBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdFLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7O0NBU1g7YUFDQTs7OztZQWxDUSxlQUFlO1lBSEosVUFBVTtZQUFpQixTQUFTOzs7dUJBeUNyRCxLQUFLO3lCQUdMLEtBQUs7bUJBR0wsS0FBSzs7Ozs7OztJQVJOLGlEQUFtQzs7SUFFbkMsNkNBQytDOztJQUUvQywrQ0FDeUI7O0lBRXpCLHlDQUN5Qjs7SUFFekIsMENBQWtCOztJQUVsQiw2Q0FBeUI7O0lBRXpCLHVDQUFrQjs7SUFFbEIsMENBQWM7O0lBQ2QsK0NBQXdCOzs7OztJQUVaLDRDQUFnQzs7Ozs7SUFBRSx5Q0FBd0I7Ozs7O0lBQUUsNkNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmFFeWUsIGZhRXllU2xhc2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMnO1xuaW1wb3J0IHsgU2hvd0hpZGVTZXJ2aWNlIH0gZnJvbSAnLi9zaG93LWhpZGUuc2VydmljZSc7XG5cbmV4cG9ydCBlbnVtIEJ0blN0eWxlIHtcbiAgUHJpbWFyeSA9ICdwcmltYXJ5JyxcbiAgU2Vjb25kYXJ5ID0gJ3NlY29uZGFyeScsXG4gIFN1Y2Nlc3MgPSAnc3VjY2VzcycsXG4gIERhbmdlciA9ICdkYW5nZXInLFxuICBXYXJuaW5nID0gJ3dhcm5pbmcnLFxuICBJbmZvID0gJ2luZm8nLFxuICBEYXJrID0gJ2RhcmsnLFxuICBMaWdodCA9ICdsaWdodCdcbn1cblxuLyoqXG4gKiBBZGQgYSBzcGxpdCBpbnB1dCBidXR0b24gdG8gcGFzc3dvcmQgb3IgdGV4dCBpbnB1dC4gVG9nZ2xlcyBpbnB1dCB0eXBlIGJldHdlZW4gXCJ0ZXh0XCIgYW5kIFwicGFzc3dvcmRcIi5cbiAqXG4gKiBAZXhhbXBsZVxuICogPHNob3ctaGlkZS1wYXNzd29yZCBzaXplPVwic218bGdcIj5cbiAqIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPS4uLiAvPlxuICogPC9zaG93LWhpZGUtcGFzc3dvcmQ+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Nob3ctaGlkZS1wYXNzd29yZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogYFxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmQgbmd4LXNob3ctaGlkZS1wYXNzd29yZFwiPlxuICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBbbmdDbGFzc109XCIoYnRuT3V0bGluZSA/ICdidG4tb3V0bGluZS0nICsgYnRuU3R5bGUgOiAnYnRuLScgKyBidG5TdHlsZSlcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiIFtzaG93SGlkZVRyaWdnZXJdPVwiaWRcIj5cbiAgICAgIDxmYS1pY29uIFtmaXhlZFdpZHRoXT1cInRydWVcIiBzaXplPVwibGdcIiBbaWNvbl09XCIoaXNIaWRkZW4gPyBmYUV5ZSA6IGZhRXllU2xhc2gpXCJcbiAgICAgICAgW3Nob3dIaWRlU3RhdHVzXT1cIntpZDogaWR9XCI+PC9mYS1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbmBcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVQYXNzd29yZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgYnRuU3R5bGU6IEJ0blN0eWxlID0gQnRuU3R5bGUuU2Vjb25kYXJ5O1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBidG5PdXRsaW5lID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2l6ZTogJ3NtJyB8ICdsZyc7XG5cbiAgcHVibGljIGlucHV0OiBhbnk7XG5cbiAgcHVibGljIGlzSGlkZGVuOiBib29sZWFuO1xuXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuXG4gIGZhRXllID0gZmFFeWU7XG4gIGZhRXllU2xhc2ggPSBmYUV5ZVNsYXNoO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLCBwcml2YXRlIGVsZW06IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBpZiAoIXRoaXMuaW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gaW5wdXQgZWxlbWVudCBmb3VuZC4gUGxlYXNlIHJlYWQgdGhlIGRvY3MhYCk7XG4gICAgfVxuICAgIHRoaXMuaWQgPSB0aGlzLmlucHV0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaWQgPSAnc2hvd0hpZGVJbnB1dCcgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5pbnB1dCwgJ2lkJywgdGhpcy5pZCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdpbnB1dC1ncm91cCcpO1xuICAgIGlmICh0aGlzLnNpemUgPT09ICdzbScpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdpbnB1dC1ncm91cC1zbScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zaXplID09PSAnbGcnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LCAnaW5wdXQtZ3JvdXAtbGcnKTtcbiAgICB9XG4gICAgdGhpcy5pc0hpZGRlbiA9IHRoaXMuaW5wdXQudHlwZSA9PT0gJ3Bhc3N3b3JkJztcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaW5wdXQsICdmb3JtLWNvbnRyb2wnKTsgLy8ganVzdCB0byBiZSBzdXJlXG4gICAgdGhpcy5zZXJ2aWNlLnNldFNob3codGhpcy5pZCwgdGhpcy5pbnB1dC50eXBlICE9PSAncGFzc3dvcmQnKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZS5nZXRPYnNlcnZhYmxlKHRoaXMuaWQpLnN1YnNjcmliZShzaG93ID0+IHtcbiAgICAgIHRoaXMuaXNIaWRkZW4gPSAhc2hvdztcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuaW5wdXQsICd0eXBlJywgc2hvdyA/ICd0ZXh0JyA6ICdwYXNzd29yZCcpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19