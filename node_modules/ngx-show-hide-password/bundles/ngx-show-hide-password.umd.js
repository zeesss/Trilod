(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@fortawesome/free-solid-svg-icons'), require('@angular/common'), require('@angular/forms'), require('@fortawesome/angular-fontawesome')) :
    typeof define === 'function' && define.amd ? define('ngx-show-hide-password', ['exports', '@angular/core', 'rxjs', '@fortawesome/free-solid-svg-icons', '@angular/common', '@angular/forms', '@fortawesome/angular-fontawesome'], factory) :
    (global = global || self, factory(global['ngx-show-hide-password'] = {}, global.ng.core, global.rxjs, global.freeSolidSvgIcons, global.ng.common, global.ng.forms, global.angularFontawesome));
}(this, function (exports, core, rxjs, freeSolidSvgIcons, common, forms, angularFontawesome) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IState() { }
    if (false) {
        /** @type {?} */
        IState.prototype.id;
        /** @type {?} */
        IState.prototype.show;
        /** @type {?|undefined} */
        IState.prototype.subject;
    }
    var ShowHideService = /** @class */ (function () {
        function ShowHideService() {
            this.states = [];
        }
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.getIO = /**
         * @private
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var io = this.states.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.id === id; }));
            if (!io && id) {
                io = this.init(id);
            }
            return io;
        };
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.init = /**
         * @private
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var subject = new rxjs.ReplaySubject(1);
            /** @type {?} */
            var io = {
                id: id,
                show: false,
                subject: subject
            };
            this.states.push(io);
            return io;
        };
        /**
         * @private
         * @param {?} io
         * @param {?} show
         * @return {?}
         */
        ShowHideService.prototype.saveAndProadcast = /**
         * @private
         * @param {?} io
         * @param {?} show
         * @return {?}
         */
        function (io, show) {
            io.show = show;
            io.subject.next(io.show);
        };
        /**
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.getObservable = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.getIO(id).subject;
        };
        /**
         * @param {?} id
         * @param {?} show
         * @return {?}
         */
        ShowHideService.prototype.setShow = /**
         * @param {?} id
         * @param {?} show
         * @return {?}
         */
        function (id, show) {
            this.saveAndProadcast(this.getIO(id), show);
        };
        /**
         * @param {?} id
         * @return {?}
         */
        ShowHideService.prototype.toggleShow = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var io = this.getIO(id);
            this.saveAndProadcast(io, !io.show);
        };
        ShowHideService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShowHideService.ctorParameters = function () { return []; };
        /** @nocollapse */ ShowHideService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
        return ShowHideService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShowHideService.prototype.states;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideTriggerDirective = /** @class */ (function () {
        function ShowHideTriggerDirective(service, errorHandler) {
            this.service = service;
            this.errorHandler = errorHandler;
        }
        /**
         * @return {?}
         */
        ShowHideTriggerDirective.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (this.showHideTrigger) {
                this.service.toggleShow(this.showHideTrigger);
            }
            else {
                this.errorHandler.handleError(new Error("No input id found. Please read the docs!"));
            }
        };
        ShowHideTriggerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[showHideTrigger]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideTriggerDirective.ctorParameters = function () { return [
            { type: ShowHideService },
            { type: core.ErrorHandler }
        ]; };
        ShowHideTriggerDirective.propDecorators = {
            showHideTrigger: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ['click',] }]
        };
        return ShowHideTriggerDirective;
    }());
    if (false) {
        /** @type {?} */
        ShowHideTriggerDirective.prototype.showHideTrigger;
        /**
         * @type {?}
         * @private
         */
        ShowHideTriggerDirective.prototype.service;
        /**
         * @type {?}
         * @private
         */
        ShowHideTriggerDirective.prototype.errorHandler;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ShowHideStatusConfig() { }
    if (false) {
        /** @type {?|undefined} */
        ShowHideStatusConfig.prototype.id;
        /** @type {?|undefined} */
        ShowHideStatusConfig.prototype.show;
        /** @type {?|undefined} */
        ShowHideStatusConfig.prototype.hide;
        /** @type {?|undefined} */
        ShowHideStatusConfig.prototype.materialIcon;
    }
    var ShowHideStatusDirective = /** @class */ (function () {
        function ShowHideStatusDirective(service, el, renderer, errorHandler) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
            this.errorHandler = errorHandler;
        }
        Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
            set: /**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                this.init(config);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ShowHideStatusDirective.prototype.init = /**
         * @private
         * @param {?} config
         * @return {?}
         */
        function (config) {
            var _this = this;
            /** @type {?} */
            var defaultConfig = {
                show: 'visibility',
                hide: 'visibility_off',
                materialIcon: false,
                id: null
            };
            this.config = __assign({}, defaultConfig, config);
            if (this.config.id) {
                this.subscription = this.service.getObservable(this.config.id).subscribe((/**
                 * @param {?} show
                 * @return {?}
                 */
                function (show) { return _this.updateStatus(show); }));
            }
            else {
                this.errorHandler.handleError(new Error("No input id found. Please read the docs!"));
            }
        };
        /**
         * @private
         * @param {?} show
         * @return {?}
         */
        ShowHideStatusDirective.prototype.updateStatus = /**
         * @private
         * @param {?} show
         * @return {?}
         */
        function (show) {
            if (this.config.materialIcon) {
                this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
            }
            else {
                this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
                this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
            }
        };
        /**
         * @return {?}
         */
        ShowHideStatusDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        ShowHideStatusDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[showHideStatus]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideStatusDirective.ctorParameters = function () { return [
            { type: ShowHideService },
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.ErrorHandler }
        ]; };
        ShowHideStatusDirective.propDecorators = {
            showHideStatus: [{ type: core.Input }]
        };
        return ShowHideStatusDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.config;
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.service;
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.el;
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.renderer;
        /**
         * @type {?}
         * @private
         */
        ShowHideStatusDirective.prototype.errorHandler;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHideInputDirective = /** @class */ (function () {
        function ShowHideInputDirective(service, el, renderer) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
            this.id = this.el.nativeElement.getAttribute('id');
            if (!this.id) {
                throw new Error("No input id found. Please read the docs!");
            }
            this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
        }
        /**
         * @return {?}
         */
        ShowHideInputDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription = this.service
                .getObservable(this.id)
                .subscribe((/**
             * @param {?} show
             * @return {?}
             */
            function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); }));
        };
        /**
         * @return {?}
         */
        ShowHideInputDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        ShowHideInputDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[showHideInput]'
                    },] }
        ];
        /** @nocollapse */
        ShowHideInputDirective.ctorParameters = function () { return [
            { type: ShowHideService },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        return ShowHideInputDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShowHideInputDirective.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        ShowHideInputDirective.prototype.id;
        /**
         * @type {?}
         * @private
         */
        ShowHideInputDirective.prototype.service;
        /**
         * @type {?}
         * @private
         */
        ShowHideInputDirective.prototype.el;
        /**
         * @type {?}
         * @private
         */
        ShowHideInputDirective.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var BtnStyle = {
        Primary: 'primary',
        Secondary: 'secondary',
        Success: 'success',
        Danger: 'danger',
        Warning: 'warning',
        Info: 'info',
        Dark: 'dark',
        Light: 'light',
    };
    /**
     * Add a split input button to password or text input. Toggles input type between "text" and "password".
     *
     * \@example
     * <show-hide-password size="sm|lg">
     * <input type="password" name=... />
     * </show-hide-password>
     */
    var ShowHidePasswordComponent = /** @class */ (function () {
        function ShowHidePasswordComponent(service, elem, renderer) {
            this.service = service;
            this.elem = elem;
            this.renderer = renderer;
            this.btnStyle = BtnStyle.Secondary;
            this.btnOutline = true;
            this.faEye = freeSolidSvgIcons.faEye;
            this.faEyeSlash = freeSolidSvgIcons.faEyeSlash;
        }
        /**
         * @return {?}
         */
        ShowHidePasswordComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.input = this.elem.nativeElement.querySelector('input');
            if (!this.input) {
                throw new Error("No input element found. Please read the docs!");
            }
            this.id = this.input.getAttribute('id');
            if (!this.id) {
                this.id = 'showHideInput' + Math.round(Math.random() * 100000);
                this.renderer.setAttribute(this.input, 'id', this.id);
            }
            this.renderer.addClass(this.elem.nativeElement, 'input-group');
            if (this.size === 'sm') {
                this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
            }
            else if (this.size === 'lg') {
                this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
            }
            this.isHidden = this.input.type === 'password';
            this.renderer.addClass(this.input, 'form-control'); // just to be sure
            this.service.setShow(this.id, this.input.type !== 'password');
            this.subscription = this.service.getObservable(this.id).subscribe((/**
             * @param {?} show
             * @return {?}
             */
            function (show) {
                _this.isHidden = !show;
                _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
            }));
        };
        /**
         * @return {?}
         */
        ShowHidePasswordComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        ShowHidePasswordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'show-hide-password',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n  <ng-content></ng-content>\n  <div class=\"input-group-append ngx-show-hide-password\">\n    <button class=\"btn\" [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n      type=\"button\" [showHideTrigger]=\"id\">\n      <fa-icon [fixedWidth]=\"true\" size=\"lg\" [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n        [showHideStatus]=\"{id: id}\"></fa-icon>\n    </button>\n  </div>\n"
                    }] }
        ];
        /** @nocollapse */
        ShowHidePasswordComponent.ctorParameters = function () { return [
            { type: ShowHideService },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        ShowHidePasswordComponent.propDecorators = {
            btnStyle: [{ type: core.Input }],
            btnOutline: [{ type: core.Input }],
            size: [{ type: core.Input }]
        };
        return ShowHidePasswordComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShowHidePasswordComponent.prototype.subscription;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.btnStyle;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.btnOutline;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.size;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.input;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.isHidden;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.id;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.faEye;
        /** @type {?} */
        ShowHidePasswordComponent.prototype.faEyeSlash;
        /**
         * @type {?}
         * @private
         */
        ShowHidePasswordComponent.prototype.service;
        /**
         * @type {?}
         * @private
         */
        ShowHidePasswordComponent.prototype.elem;
        /**
         * @type {?}
         * @private
         */
        ShowHidePasswordComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShowHidePasswordModule = /** @class */ (function () {
        function ShowHidePasswordModule() {
        }
        ShowHidePasswordModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, angularFontawesome.FontAwesomeModule],
                        exports: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective],
                        declarations: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective]
                    },] }
        ];
        return ShowHidePasswordModule;
    }());

    exports.BtnStyle = BtnStyle;
    exports.ShowHideInputDirective = ShowHideInputDirective;
    exports.ShowHidePasswordComponent = ShowHidePasswordComponent;
    exports.ShowHidePasswordModule = ShowHidePasswordModule;
    exports.ShowHideService = ShowHideService;
    exports.ShowHideStatusDirective = ShowHideStatusDirective;
    exports.ShowHideTriggerDirective = ShowHideTriggerDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-show-hide-password.umd.js.map
