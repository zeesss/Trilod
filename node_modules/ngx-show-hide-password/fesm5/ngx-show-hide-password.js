import { Injectable, ɵɵdefineInjectable, Directive, ErrorHandler, Input, HostListener, ElementRef, Renderer2, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { __assign } from 'tslib';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IState() { }
if (false) {
    /** @type {?} */
    IState.prototype.id;
    /** @type {?} */
    IState.prototype.show;
    /** @type {?|undefined} */
    IState.prototype.subject;
}
var ShowHideService = /** @class */ (function () {
    function ShowHideService() {
        this.states = [];
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getIO = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.states.find((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o.id === id; }));
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.init = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var subject = new ReplaySubject(1);
        /** @type {?} */
        var io = {
            id: id,
            show: false,
            subject: subject
        };
        this.states.push(io);
        return io;
    };
    /**
     * @private
     * @param {?} io
     * @param {?} show
     * @return {?}
     */
    ShowHideService.prototype.saveAndProadcast = /**
     * @private
     * @param {?} io
     * @param {?} show
     * @return {?}
     */
    function (io, show) {
        io.show = show;
        io.subject.next(io.show);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.getObservable = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getIO(id).subject;
    };
    /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    ShowHideService.prototype.setShow = /**
     * @param {?} id
     * @param {?} show
     * @return {?}
     */
    function (id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ShowHideService.prototype.toggleShow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    };
    ShowHideService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ShowHideService.ctorParameters = function () { return []; };
    /** @nocollapse */ ShowHideService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    return ShowHideService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideService.prototype.states;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ShowHideTriggerDirective = /** @class */ (function () {
    function ShowHideTriggerDirective(service, errorHandler) {
        this.service = service;
        this.errorHandler = errorHandler;
    }
    /**
     * @return {?}
     */
    ShowHideTriggerDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.showHideTrigger) {
            this.service.toggleShow(this.showHideTrigger);
        }
        else {
            this.errorHandler.handleError(new Error("No input id found. Please read the docs!"));
        }
    };
    ShowHideTriggerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[showHideTrigger]'
                },] }
    ];
    /** @nocollapse */
    ShowHideTriggerDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ErrorHandler }
    ]; };
    ShowHideTriggerDirective.propDecorators = {
        showHideTrigger: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return ShowHideTriggerDirective;
}());
if (false) {
    /** @type {?} */
    ShowHideTriggerDirective.prototype.showHideTrigger;
    /**
     * @type {?}
     * @private
     */
    ShowHideTriggerDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideTriggerDirective.prototype.errorHandler;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ShowHideStatusConfig() { }
if (false) {
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.id;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.show;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.hide;
    /** @type {?|undefined} */
    ShowHideStatusConfig.prototype.materialIcon;
}
var ShowHideStatusDirective = /** @class */ (function () {
    function ShowHideStatusDirective(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this.init(config);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ShowHideStatusDirective.prototype.init = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        /** @type {?} */
        var defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = __assign({}, defaultConfig, config);
        if (this.config.id) {
            this.subscription = this.service.getObservable(this.config.id).subscribe((/**
             * @param {?} show
             * @return {?}
             */
            function (show) { return _this.updateStatus(show); }));
        }
        else {
            this.errorHandler.handleError(new Error("No input id found. Please read the docs!"));
        }
    };
    /**
     * @private
     * @param {?} show
     * @return {?}
     */
    ShowHideStatusDirective.prototype.updateStatus = /**
     * @private
     * @param {?} show
     * @return {?}
     */
    function (show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    };
    /**
     * @return {?}
     */
    ShowHideStatusDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideStatusDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[showHideStatus]'
                },] }
    ];
    /** @nocollapse */
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ErrorHandler }
    ]; };
    ShowHideStatusDirective.propDecorators = {
        showHideStatus: [{ type: Input }]
    };
    return ShowHideStatusDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ShowHideStatusDirective.prototype.errorHandler;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ShowHideInputDirective = /** @class */ (function () {
    function ShowHideInputDirective(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.id = this.el.nativeElement.getAttribute('id');
        if (!this.id) {
            throw new Error("No input id found. Please read the docs!");
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe((/**
         * @param {?} show
         * @return {?}
         */
        function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); }));
    };
    /**
     * @return {?}
     */
    ShowHideInputDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHideInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[showHideInput]'
                },] }
    ];
    /** @nocollapse */
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ShowHideInputDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ShowHideInputDirective.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var BtnStyle = {
    Primary: 'primary',
    Secondary: 'secondary',
    Success: 'success',
    Danger: 'danger',
    Warning: 'warning',
    Info: 'info',
    Dark: 'dark',
    Light: 'light',
};
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * \@example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
var ShowHidePasswordComponent = /** @class */ (function () {
    function ShowHidePasswordComponent(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    /**
     * @return {?}
     */
    ShowHidePasswordComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error("No input element found. Please read the docs!");
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput' + Math.round(Math.random() * 100000);
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe((/**
         * @param {?} show
         * @return {?}
         */
        function (show) {
            _this.isHidden = !show;
            _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
        }));
    };
    /**
     * @return {?}
     */
    ShowHidePasswordComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ShowHidePasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'show-hide-password',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n  <ng-content></ng-content>\n  <div class=\"input-group-append ngx-show-hide-password\">\n    <button class=\"btn\" [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n      type=\"button\" [showHideTrigger]=\"id\">\n      <fa-icon [fixedWidth]=\"true\" size=\"lg\" [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n        [showHideStatus]=\"{id: id}\"></fa-icon>\n    </button>\n  </div>\n"
                }] }
    ];
    /** @nocollapse */
    ShowHidePasswordComponent.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ShowHidePasswordComponent.propDecorators = {
        btnStyle: [{ type: Input }],
        btnOutline: [{ type: Input }],
        size: [{ type: Input }]
    };
    return ShowHidePasswordComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.subscription;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnStyle;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.btnOutline;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.size;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.input;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.isHidden;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.id;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEye;
    /** @type {?} */
    ShowHidePasswordComponent.prototype.faEyeSlash;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    ShowHidePasswordComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ShowHidePasswordModule = /** @class */ (function () {
    function ShowHidePasswordModule() {
    }
    ShowHidePasswordModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, FontAwesomeModule],
                    exports: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective],
                    declarations: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective]
                },] }
    ];
    return ShowHidePasswordModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BtnStyle, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule, ShowHideService, ShowHideStatusDirective, ShowHideTriggerDirective };
//# sourceMappingURL=ngx-show-hide-password.js.map
