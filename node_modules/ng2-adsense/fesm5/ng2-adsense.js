import { __decorate, __param } from 'tslib';
import { InjectionToken, Inject, Input, ViewChild, ElementRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

var ADSENSE_TOKEN = new InjectionToken('AdsenseConfig');

var AdsenseComponent = /** @class */ (function () {
    function AdsenseComponent(config) {
        this.config = config;
        /** can be manually set if you need all ads on a page to have same id page-xxx */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    AdsenseComponent.prototype.ngOnInit = function () {
        var config = this.config;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    };
    AdsenseComponent.prototype.ngOnDestroy = function () {
        var iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    };
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     */
    AdsenseComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var res = this.push();
        if (res instanceof TypeError) {
            setTimeout(function () { return _this.push(); }, this.timeOutRetry);
        }
    };
    AdsenseComponent.prototype.push = function () {
        var p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            var adsbygoogle = window.adsbygoogle;
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    };
    AdsenseComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [ADSENSE_TOKEN,] }] }
    ]; };
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "adClient", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "adSlot", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "adFormat", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "adRegion", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "display", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "height", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "layout", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "layoutKey", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "pageLevelAds", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "timeOutRetry", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "adtest", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "fullWidthResponsive", void 0);
    __decorate([
        Input()
    ], AdsenseComponent.prototype, "className", void 0);
    __decorate([
        ViewChild('ins', { read: ElementRef, static: true })
    ], AdsenseComponent.prototype, "ins", void 0);
    AdsenseComponent = __decorate([
        Component({
            selector: 'ng2-adsense,ng-adsense',
            template: "\n  <ins #ins class=\"adsbygoogle {{ className }}\"\n    [style.display]=\"display\"\n    [style.width.px]=\"width\"\n    [style.height.px]=\"height\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\"\n    [attr.data-full-width-responsive]=\"fullWidthResponsive\">\n  </ins>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __param(0, Inject(ADSENSE_TOKEN))
    ], AdsenseComponent);
    return AdsenseComponent;
}());

var AdsenseModule = /** @class */ (function () {
    function AdsenseModule() {
    }
    AdsenseModule_1 = AdsenseModule;
    AdsenseModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: AdsenseModule_1,
            providers: [{ provide: ADSENSE_TOKEN, useValue: config }],
        };
    };
    var AdsenseModule_1;
    AdsenseModule = AdsenseModule_1 = __decorate([
        NgModule({
            imports: [CommonModule],
            exports: [AdsenseComponent],
            declarations: [AdsenseComponent],
        })
    ], AdsenseModule);
    return AdsenseModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ADSENSE_TOKEN, AdsenseComponent, AdsenseModule };
//# sourceMappingURL=ng2-adsense.js.map
