import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild, ElementRef, } from '@angular/core';
import { ADSENSE_TOKEN } from './adsense-config';
let AdsenseComponent = class AdsenseComponent {
    constructor(config) {
        this.config = config;
        /** can be manually set if you need all ads on a page to have same id page-xxx */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    ngOnInit() {
        const config = this.config;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    }
    ngOnDestroy() {
        const iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    }
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     */
    ngAfterViewInit() {
        const res = this.push();
        if (res instanceof TypeError) {
            setTimeout(() => this.push(), this.timeOutRetry);
        }
    }
    push() {
        const p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            const adsbygoogle = window.adsbygoogle;
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    }
};
AdsenseComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ADSENSE_TOKEN,] }] }
];
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "adClient", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "adSlot", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "adFormat", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "adRegion", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "display", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "width", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "height", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "layout", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "layoutKey", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "pageLevelAds", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "timeOutRetry", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "adtest", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "fullWidthResponsive", void 0);
tslib_1.__decorate([
    Input()
], AdsenseComponent.prototype, "className", void 0);
tslib_1.__decorate([
    ViewChild('ins', { read: ElementRef, static: true })
], AdsenseComponent.prototype, "ins", void 0);
AdsenseComponent = tslib_1.__decorate([
    Component({
        selector: 'ng2-adsense,ng-adsense',
        template: `
  <ins #ins class="adsbygoogle {{ className }}"
    [style.display]="display"
    [style.width.px]="width"
    [style.height.px]="height"
    [attr.data-ad-client]="adClient"
    [attr.data-ad-slot]="adSlot"
    [attr.data-ad-format]="adFormat"
    [attr.data-ad-region]="adRegion"
    [attr.data-layout]="layout"
    [attr.data-adtest]="adtest"
    [attr.data-layout-key]="layoutKey"
    [attr.data-full-width-responsive]="fullWidthResponsive">
  </ins>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__param(0, Inject(ADSENSE_TOKEN))
], AdsenseComponent);
export { AdsenseComponent };
//# sourceMappingURL=data:application/json;base64,